#include<stdio.h>
#include<math.h>
#include<conio.h>

//234103010



int main()
{
    FILE *f1;
    FILE *f2;
    FILE *f3;

    f1=fopen("OUTPUT.plt","w");
    f2=fopen("CENTRAL_u.plt","w");
    f3=fopen("CENTRAL_v.plt","w");

    int i,j,m,n,p,r,iteration;
    float dx,dy,x,y,b;

r=100; //Reynolds number
    m=75; //grid in x direction
   n=30;  //grid in y direction

    p=(m-2)*(n-2);            //total no. of interior points
    dx=15.0/(m-1);
    dy=1.0/(n-1);

    b=(dx/dy);               //beta

    float si[m][n],si_pr[m][n],w[m][n],w_pr[m][n],u[m][n],v[m][n];

    float si_error=0.0,w_error=0.0;

    iteration=0;

    //boundary condition initialization
    for(i=0;i<m;i++)

     {
         for(j=0;j<n;j++)
         {

             si[i][j]=0.0;
             if(i==(m-1))   //applying neuman boundary conditions
            {
              v[i][j]=v[i-1][j];
              u[i][j]=u[i-1][j];
            }
            if(i==0)
            {
                u[i][j]=1.5*(1-4*pow((y-0.5),2));
            }
             else
               v[i][j]=0.0;
         }
     }

     for(j=0;j<n;j++)
     {
          for(i=0;i<m;i++)
          {
              if(j==0)
              w[i][j]=(2.0/dy*dy)*(si[i][j]-si[i][j+1]);
              else if(i==0)
                w[i][j]=(2.0/dx*dx)*(si[i][j]-si[i+1][j]);
                else if(i==(m-1))
                w[i][j]=(2.0/dx*dx)*(si[i][j]-si[i-1][j]);
                 else if(j==(n-1))
                w[i][j]=(2.0/dy*dy)*(si[i][j]-si[i][j-1])-((2.0/dy)*u[i][j]);
                else
                    w[i][j]=0.0;

          }
     }

     //GAUSS-SIEDEL METHOD

     do
     {
         for(j=0;j<n;j++)
         {
             for(i=0;i<m;i++)
             {
                 si_pr[i][j]=si[i][j];
                 w_pr[i][j]=w[i][j];
             }
         }

//SOLVING STREAM FUNCTION
          for(j=1;j<(n-1);j++)
         {
             for(i=1;i<(m-1);i++)
             {
                 si[i][j]=(1.0/(2*(1.0+pow(b,2))))*(si[i+1][j]+si[i-1][j]+pow(b,2)*(si[i][j+1]+si[i][j-1])+dx*dx*w[i][j]);
             }
         }

//SOLVING FOR VORTICITY
         for(j=1;j<(n-1);j++)
         {
             for(i=1;i<(m-1);i++)
             {
                 w[i][j] = (0.5/(1.0+pow(b,2)))*((1.0-(si[i][j+1]-si[i][j-1])*((b*r)/4.0))*w[i+1][j]+ (1.0+(si[i][j+1]-si[i][j-1])*((b*r)/4.0))*w[i-1][j]
                     + (1.0+(si[i+1][j]-si[i-1][j])*(r/(4.0*b)))*(pow(b,2)*w[i][j+1])+ (1.0-(si[i+1][j]-si[i-1][j])*(r/(4.0*b)))*(pow(b,2)*w[i][j-1]));;
             }
         }
// UPDATING VORTICITY AT BOUNDARIES

          for(j=0; j<n; j++)
       {
           w[0][j]=(-2*(si[1][j]-si[0][j]))/(dx*dx);
           w[m-1][j]=(-2*(si[m-2][j]-si[m-1][j]))/(dx*dx);
       }
    for(i=0; i<m; i++)
       {
            w[i][0]=(-2*(si[i][1]-si[i][0]))/(dy*dy);
            w[i][n-1]=(-2*(si[i][n-2]-si[i][n-1]+dy))/(dy*dy);
       }

//ERROR CALCULATION

            si_error=0.0;
            w_error=0.0;
            for(j=1;j<(n-1);j++)
         {
             for(i=1;i<(m-1);i++)
        {

              si_error=si_error+pow((si[i][j]-si_pr[i][j]),2.0);
              w_error=w_error+pow((w[i][j]-w_pr[i][j]),2.0);
          }
      }
      si_error=sqrt(si_error/p);
      w_error=sqrt(w_error/p);



      printf("iteration=%d\t",iteration);
      printf("error_psi=%.9lf\terror_omega=%.9lf\n",si_error,w_error);
      iteration++;
    }while(si_error>pow(10,-6) || w_error>pow(10,-6));

//UPDATING VELOCITIES

        for (j=1;j<(n-1);j++)
        {
            for(i=1;i<(m-1);i++)
            {
                 u[i][j]=(si[i][j+1]-si[i][j-1])/(2*dy);
                 v[i][j]=(si[i+1][j]-si[i-1][j])/(-2.0*dx);
             }
         }

        fprintf(f1,"ZONE I=%d, J=%d\n",m,n);

    for(i = 0; i < m; i++)
    {
       x=i*dx;
        for(j = 0; j < n; j++)
        {
           y=j*dy;
        fprintf(f1,"%f \t %f \t %f \t %f \t %f \t %f \n",x,y,u[i][j],v[i][j],si[i][j],w[i][j]);
        }
    }
    for(i=0;i<m;i++)
    fprintf(f2,"%f \t %f \n",u[n/2][i],i*dy);

    for(j=0;j<n;j++)
    fprintf(f3,"%lf \t %lf \n",j*dx,v[j][m/2]);

    fclose(f1);
    fclose(f2);
    fclose(f3);

return 0;
}
